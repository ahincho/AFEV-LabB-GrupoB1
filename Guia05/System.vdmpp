/**
  System.
  <p>
    System Class
    Like a ATM this class allows you to
    transfer balance between Purses using
    the tokens associated or Card Ids
  </p>
  @version 1.0
  @author Angel Hincho Jove
*/

class System

instance variables
	
	private Purses : map Purse'CardId to Purse;
	inv forall p in set dom Purses & Purses(p).GetCardNo() = p;
	private Log : seq of Transaction := [];
	
types
	
	public Transaction ::
		fromId : Purse'CardId
		toId : Purse'CardId
		sum : nat;
	
operations
	
	-- Transfer Balance from a Origin Purse to Final Purse
	public Transfer : Purse'CardId * Purse'CardId * nat ==> ()
	Transfer(fromId, toId, sum) == (
		Purses(fromId).DecreaseBalance(sum);
		Purses(toId).IncreaseBalance(sum);
	)
	pre
		{fromId, toId} subset dom Purses and
		fronId <> toId and
		Purses(fromId).GetBalance() >= sum;
	
	-- Constructor for System Class
	public System : set of Purse ==> System
	System(PurseSet) == (
		Purses := { p.GetCardNo() |-> p | p in set PurseSet }
	)
	pre
		forall p, q in set PurseSet &
		p <> q => p.GetCardNo() <> q.GetCardNo();
	
	-- Method to sum balance at Transactions
	public TotalTransferred : () ==> nat
	TotalTransferred() == (
		return TotalSum(Log);
	);
	
functions
	
	-- Function to record Transactions
	-- If you notice, we are using recursion
	TotalSum : seq of Transaction -> nat
	TotalSum(tSeq) ==
		if tSeq = []
			then 0
		else
			let tx = hd tSeq
			in tx.sum + TotalSum(tl tSeq)
	measure Len;
	
	-- Function to recover lenght of a sequence
	-- This function is important because recursion
	Len : seq of Transaction -> nat
	Len(l) ==
		len l;
	
end System
