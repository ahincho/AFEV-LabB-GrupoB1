/**
  Rack.
  <p>
    Rack Class.
    Rack of Glasses.
  </p>
  @version 1.0
  @author Angel Hincho Jove
*/

class Rack

types
	
	RackId = token;
	
instance variables
	
	private id : RackId;
	private glasses : set of Glass;
	private capacity : nat;
	
operations	

	-- Constructor for Rack Class
	public Rack : RackId * set of Glass * nat ==> Rack
	Rack(rId, rGlasses, rCapacity) == (
		id := rId;
		glasses := rGlasses;
		capacity := rCapacity;
	)
	pre
		card rGlasses <= rCapacity and
		forall p, q in set rGlasses & p <> q => p.GetId() <> q.GetId() and
		exists r in set rGlasses & r.GetMaterial() = <Hot>;
	
	-- Get Rack Id of the Instance
	public GetId : () ==> RackId
	GetId() == (
		return id;
	);
	
	-- Get Glass Ids of the Rack
	public GetGlassIds : () ==> set of Glass`GlassId
	GetGlassIds() == (
		return { g.GetId() | g in set glasses };
	);
	
	-- Get Glasses on the Rack
	public GetGlasses : () ==> set of Glass
	GetGlasses() == (
		return glasses;
	);
	
	-- Get Rack Capacity of the Instance
	public GetCapacity : () ==> nat
	GetCapacity() == (
		return capacity;
	);
	
	-- Check if the Rack is full
	public IsFull : () ==> bool
	IsFull() == (
		return card glasses >= capacity;
	);
	
functions
	
	-- No functions defined yet
	
end Rack
